@model TMNT.Models.ViewModels.BalanceVerificationViewModel

@{
    ViewBag.Title = "Verification";
}

@section AddToHead {
    @Styles.Render("~/maxxam-forms")

    <style>
        .container-border {
            border: 1px solid #eee;
            border-top:none;
            min-height:289px;
        }
        .tab {
            cursor: pointer;
            position:relative;
            border: 1px solid #cfcfcf;
            padding: 15px 0 15px 0;
            display:inline-block;
            border-top:#fff;
            background:#fff;
            margin-top:-1px;
        }

        .tab-unselected {
            background: #cfcfcf;
        }

        .addon-weight {
            padding:0;
            border:none;
        }

        .form-group {
            margin-left:0 !important;
            margin-right:0 !important;
        }
    </style>
}

<script>
    $(function () {
        //fixing a rendering issue in IE with class btn-success
        if (false || !!document.documentMode) {
            $('.btn-success').css('float', 'right');
        }

        var validateOne = $('.weight-validate').first(), validateTwo = $('.weight-validate').eq(1), validateThree = $('.weight-validate').eq(2);
        var passOrFailOne = $('.pass-or-fail').first(), passOrFailTwo = $('.pass-or-fail').eq(1), passOrFailThree = $('.pass-or-fail').eq(2);
        var limitOne = $('.weight-limit').first(), limitTwo = $('.weight-limit').eq(1), limitThree = $('.weight-limit').eq(2);
        var weightOneVal = 0, weightTwoVal = 0, weightThreeVal = 0;
        var CONST_TWO_PERCENT = 2.00;
        var numberOfTests = $('#NumberOfTestsToVerify'), numberOfDecimals = !isNaN($('#NumberOfDecimals').val()) ? parseInt($('#NumberOfDecimals').val()) : 1;

        var weightOne = $('.weight-one'), weightTwo = $('.weight-two'), weightThree = $('.weight-three');
        var message = $('#success-error-msg > ul');
        var verificationTable = $('#verification-table'), append;
        var save = $('input[type=submit]');

        validateOne.on('click', function (e) {
            e.preventDefault();
            $('#placeholder').text("");
            weightOneVal = parseFloat(weightOne.val());
            var weightLimitOneVal = parseFloat(limitOne.val().split(" ")[0]);

            if (isNaN(weightOneVal)) {
                //highly likely the input wasn't a number, provide error message
                alert("Weight one must be filled");
            } else {
                //is a valid number, proceed
                var variance = ((weightLimitOneVal - weightOneVal) / weightLimitOneVal * 100).toFixed(2);
                if (variance < 0) { variance = -variance; }//making sure variance is always a positive number

                if (!(variance > CONST_TWO_PERCENT)) {
                    //valid range, first verification passed
                    var text = "<li style='color:#5cb85c'>First weight passed</li>";
                    message.append(text);
                    weightOne.attr('readonly', 'readonly');
                    validateOne.attr('disabled', 'disabled');
                    //weight two is now ready to use
                    if (weightTwo.attr("readonly", "readonly")) {
                        weightTwo.removeAttr("readonly");
                    }
                    weightTwo.removeAttr("disabled");
                    validateTwo.removeAttr("disabled");

                } else {
                    //invalid range, first verification failed
                    weightOne.val("");

                    //write record to table
                    append = "";
                    append += "<tr><td><input name='WeightOneTable'style='border:none;background:transparent;width:80%;' type='text' readonly='readonly' value='" + weightOneVal.toFixed(numberOfDecimals) + "'/></td>" +
                            "<td><input name='WeightTwoTable' style='border:none;background:transparent;width:80%;' type='text' readonly='readonly' value=''/></td>" +
                             "<td><input name='WeightThreeTable' style='border:none;background:transparent;width:80%;' type='text' readonly='readonly' value=''/></td>" +
                            "<td><input name='PassOrFailTable' style='border:none;background:transparent;color:red;' type='text' readonly='readonly' value='Fail'/></td>";
                    verificationTable.append(append);

                    alert("Verification failed. The form has been reset and a record has been made in the verification table.");
                }
            }
        });

        validateTwo.on('click', function (e) {
            e.preventDefault();
            weightTwoVal = parseFloat(weightTwo.val());
            var weightLimitTwoVal = parseFloat(limitTwo.val().split(" ")[0]);

            if (isNaN(weightLimitTwoVal)) {
                //highly likely the input wasn't a number, provide error message
                alert("Weight one must be filled");
            } else {
                //is a valid number, proceed
                var variance = ((weightLimitTwoVal - weightTwoVal) / weightLimitTwoVal * 100).toFixed(2);
                if (variance < 0) { variance = -variance; }//making sure variance is always a positive number

                if (!(variance > CONST_TWO_PERCENT)) {
                    //valid range, first verification passed
                    var text = "<li style='color:#5cb85c'>Second weight passed</li>";
                    weightTwo.attr('readonly', 'readonly');
                    validateTwo.attr('disabled', 'disabled');

                    if (parseFloat(numberOfTests.val()) > 2) {
                        //weight three is now ready to use
                        weightThree.removeAttr("disabled");
                        validateThree.removeAttr("disabled");
                    } else if (parseFloat(numberOfTests.val()) === 2) {
                        //verification done
                        text += "<li style='color:#5cb85c'>You can now save the verification and use this balance!</li>";
                        append = "";
                        append += "<tr><td><input name='WeightOneTable'style='border:none;background:transparent;width:80%' type='text' readonly='readonly' value='" + weightOneVal.toFixed(numberOfDecimals) + "'/></td>" +
                                "<td><input name='WeightTwoTable' style='border:none;background:transparent;width:80%' type='text' readonly='readonly' value='" + weightTwoVal.toFixed(numberOfDecimals) + "'/></td>" +
                                 "<td><input name='WeightThreeTable' style='border:none;background:transparent;width:80%' type='text' readonly='readonly' value=''/></td>" +
                                "<td><input name='PassOrFailTable' style='border:none;background:transparent;color:#5cb85c;' type='text' readonly='readonly' value='Pass'/></td>";
                        verificationTable.append(append);
                        save.removeAttr("disabled");
                    }
                    message.append(text);
                } else {
                    //invalid range, second verification failed
                    weightOne.val("");
                    weightTwo.val("");
                    weightTwo.attr('disabled', 'disabled');
                    validateTwo.attr('disabled', 'disabled');
                    weightOne.removeAttr("readonly");
                    validateOne.removeAttr('disabled');

                    //write record to table
                    append = "";
                    append += "<tr><td><input name='WeightOneTable'style='border:none;background:transparent;width:80%' type='text' readonly='readonly' value='" + weightOneVal.toFixed(numberOfDecimals) + "'/></td>" +
                            "<td><input name='WeightTwoTable' style='border:none;background:transparent;width:80%' type='text' readonly='readonly' value='" + weightTwoVal.toFixed(numberOfDecimals) + "'/></td>" +
                             "<td><input name='WeightThreeTable' style='border:none;background:transparent;width:80%' type='text' readonly='readonly' value=''/></td>" +
                            "<td><input name='PassOrFailTable' style='border:none;background:transparent;color:red;' type='text' readonly='readonly' value='Fail'/></td>";
                    verificationTable.append(append);

                    alert("Verification failed. The form has been reset and a record has been made in the verification table.");
                }
            }
        });

        validateThree.on('click', function (e) {
            e.preventDefault();
            weightThreeVal = parseFloat(weightThree.val());
            var weightLimitThreeVal = parseFloat(limitThree.val().split(" ")[0]);

            if (isNaN(weightLimitThreeVal)) {
                //highly likely the input wasn't a number, provide error message
                alert("Weight one must be filled");
            } else {
                //is a valid number, proceed
                var variance = ((weightLimitThreeVal - weightThreeVal) / weightLimitThreeVal * 100).toFixed(2);
                if (variance < 0) { variance = -variance; }//making sure variance is always a positive number

                if (!(variance > CONST_TWO_PERCENT)) {
                    //valid range, first verification passed
                    var text = "<li style='color:#5cb85c'>Third weight passed</li><li style='color:#5cb85c'>You can now save the verification and use this balance!</li>";
                    message.append(text);
                    weightThree.attr('readonly', 'readonly');
                    validateThree.attr('disabled', 'disabled');

                    //verification done
                    append = "";
                    append += "<tr><td><input name='WeightOneTable'style='border:none;background:transparent;width:80%' type='text' readonly='readonly' value='" + weightOneVal.toFixed(numberOfDecimals) + "'/></td>" +
                            "<td><input name='WeightTwoTable' style='border:none;background:transparent;width:80%' type='text' readonly='readonly' value='" + weightTwoVal.toFixed(numberOfDecimals) + "'/></td>" +
                             "<td><input name='WeightThreeTable' style='border:none;background:transparent;width:80%' type='text' readonly='readonly' value='" + weightThreeVal.toFixed(numberOfDecimals) + "'/></td>" +
                            "<td><input name='PassOrFailTable' style='border:none;background:transparent;color:#5cb85c;' type='text' readonly='readonly' value='Pass'/></td>";
                    verificationTable.append(append);
                    save.removeAttr("disabled");
                } else {
                    //invalid range, second verification failed
                    weightOne.val("");
                    weightTwo.val("");
                    weightThree.val("");
                    weightOne.removeAttr("readonly");
                    validateOne.removeAttr("disabled");
                    weightTwo.attr("disabled", "disabled");
                    validateTwo.attr('disabled', 'disabled');
                    weightThree.attr("disabled", "disabled");
                    validateThree.attr("disabled", "disabled");

                    //write record to table
                    append = "";
                    append += "<tr><td><input name='WeightOneTable'style='border:none;background:transparent;color:#3a87ad;width:80%' type='text' readonly='readonly' value='" + weightOneVal.toFixed(numberOfDecimals) + "'/></td>" +
                            "<td><input name='WeightTwoTable' style='border:none;background:transparent;color:#3a87ad;width:80%' type='text' readonly='readonly' value='" + weightTwoVal.toFixed(numberOfDecimals) + "'/></td>" +
                             "<td><input name='WeightThreeTable' style='border:none;background:transparent;color:#3a87ad;width:80%' type='text' readonly='readonly' value='" + weightThreeVal.toFixed(numberOfDecimals) + "'/></td>" +
                            "<td><input name='PassOrFailTable' style='border:none;background:transparent;color:red;' type='text' readonly='readonly' value='Fail'/></td>";
                    verificationTable.append(append);

                    alert("Verification failed. The form has been reset and a record has been made in the verification table.");
                }
            }
        });
    });
</script>

@using (Html.BeginForm("CreateVerification", "Balance", null, FormMethod.Post, new { enctype = "multipart/form-data" })) {
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.NumberOfTestsToVerify)
    @Html.HiddenFor(model => model.NumberOfDecimals)

    <div class="form-horizontal">

        <div class="row">
            <div class="col-lg-12">
                <h1>
                    New Daily Balance Verification
                </h1>
                <ol class="breadcrumb no-border-radius">
                    <li class="active">
                        <i class="fa fa-dashboard"></i>@Html.ActionLink(" Dashboard", "Index", "Home") / <i class="fa fa-wrench"></i> Devices / <i class="fa fa-balance-scale"></i> Balances / <i class="fa fa-star-o"></i> New Balance Verification
                    </li>
                </ol>
            </div>
        </div>

        <p>
            @Html.ActionLink("Back to List", "Index", "Balance", null, htmlAttributes: new { @class = "btn btn-default" })
        </p>

        <section id="section-bar">
            <div class="tabs tabs-style-bar">
                <nav>
                    <ul>
                        <li class="section-list"><a href="#section-bar-1" class="icon icon-config"><span>Balance Daily Verification</span></a></li>
                    </ul>
                </nav>
                <div class="content-wrap">
                    <section id="section-bar-1">
                        @Html.Partial("_SectionHeader", "Balance to Verify")
                        <div class="container">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="col-md-4">
                                <div class="form-group">
                                    <div class="input-group">
                                        <div class="input-group-addon addon-required" title="Required Field"></div>
                                        @Html.EditorFor(model => model.DeviceCode, new { htmlAttributes = new { @placeholder = "Balance ID", @class = "input-summary form-control required-field no-border-radius", @readonly = "readonly" } })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DeviceCode)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <div class="input-group">
                                        <div class="input-group-addon addon-required" title="Required Field"></div>
                                        @Html.EditorFor(model => model.CurrentLocation, new { htmlAttributes = new { @placeholder = "Location", @class = "input-summary form-control required-field no-border-radius", @readonly = "readonly" } })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <div class="input-group">
                                        <div class="input-group-addon addon-required" title="Required Field"></div>
                                        @Html.EditorFor(model => model.WeightId, new { htmlAttributes = new { @placeholder = "Weight ID", @class = "input-summary form-control required-field no-border-radius", @Value = "" } })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.WeightId)
                                </div>
                            </div>
                        </div>

                        @Html.Partial("_SectionHeader", "Instructions")
                        <div class="container">
                            If the measurement is outside the tolerance range, check the balance for cleanliness and level, re-zero and take a second measurement.
                            In the case of continued failure, place "Out of Service" sign, and notify supervisor and QA.
                        </div>

                        @Html.Partial("_SectionHeader", "Start Balance Verification")
                        <div class="container container-border section-test">
                            <div class="form-group">
                                <!-- Weight One -->
                                <div class="col-lg-4">
                                    <div class="form-group">
                                        <div class="input-group">
                                            <div class="input-group-addon addon-required" title="Required Field"></div>
                                            @Html.EditorFor(model => model.WeightOne, new { htmlAttributes = new { @placeholder = "Weight One", @class = "input-summary form-control weight-one", @type = "number" } })
                                            <div class="input-group-addon addon-weight">
                                                @Html.TextBoxFor(model => model.WeightLimitOne, new { @readonly = "readonly", @class = "input-summary form-control weight-limit" })
                                            </div>
                                            <a href="#" class="no-border-radius btn btn-success weight-validate">Verify</a>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.WeightOne)
                                    </div>
                                </div>
                                <!-- Weight Two -->
                                <div class="col-lg-4">
                                    <div class="form-group">
                                        <div class="input-group">
                                            <div class="input-group-addon addon-required"></div>
                                            @Html.EditorFor(model => model.WeightTwo, new { htmlAttributes = new { @placeholder = "Weight Two", @disabled = "disabled", @class = "input-summary form-control weight-two", @type = "number" } })
                                            <div class="input-group-addon addon-weight">
                                                @Html.TextBoxFor(model => model.WeightLimitTwo, new { @readonly = "readonly", @class = "input-summary form-control weight-limit" })
                                            </div>
                                            <a href="#" disabled="disabled" class="no-border-radius btn btn-success weight-validate">Verify</a>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.WeightTwo)
                                    </div>
                                </div>
                                @if (Model.NumberOfTestsToVerify == 3) {
                                        <!-- Weight Three -->
                                    <div class="col-lg-4">
                                        <div class="input-group">
                                            <div class="input-group-addon addon-required"></div>
                                            @Html.EditorFor(model => model.WeightThree, new { htmlAttributes = new { @placeholder = "Weight Three", @disabled = "disabled", @class = "input-summary form-control weight-three", @type = "number" } })
                                            <div class="input-group-addon addon-weight">
                                                @Html.TextBoxFor(model => model.WeightLimitThree, new { @readonly = "readonly", @class = "input-summary form-control weight-limit" })
                                            </div>
                                            <a href="#" disabled="disabled" class="no-border-radius btn btn-success weight-validate">Verify</a>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.WeightThree)
                                    </div>
                                }
                            </div>
                            <div class="form-group">
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        <div class="input-group-addon"></div>
                                        @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { cols = 48, rows = 6, @placeholder = "Comments", @class = "input-summary form-control no-border-radius", @style = "resize:none;" } })
                                    </div>
                                </div>
                                <div style="font-size:14px;border:1px solid #ccc;min-height:134px;padding:6px 0 6px 6px" id="success-error-msg" class="col-md-5-5">
                                    <div id="placeholder">Start taking measurements and your resulting messages will appear here to help guide you.</div>
                                    <ul>
                                        <!--list items are added here dynamically-->
                                    </ul>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-12">
                                    <input type="submit" disabled="disabled" class="btn btn-primary pull-right" value="Save" />
                                </div>
                            </div>
                        </div>
                        <div class="container section-table-results container-border hidden">
                            <table id="verification-table" class="table table-striped table-bordered summary-table">
                                <thead>
                                    <tr>
                                        <th>Weight One Result</th>
                                        <th>Weight Two Result</th>
                                        <th>Weight Three Result</th>
                                        <th>Pass/Fail</th>
                                    </tr>
                                </thead>
                                <tbody style="font-size:14px;"></tbody>
                            </table>
                        </div>
                        <div class="text-center">
                            <div id="tab-verification" class="tab">Perform Verification</div>
                            <div id="tab-results" class="tab tab-unselected">Verification Results</div>
                        </div>
                    </section>
                </div>
            </div>

        </section>
        @Html.Partial("~/Views/Shared/_SectionsPartial.cshtml")
    </div>
}

@section Scripts {
    <script>
        $(function () {
            var tabUnselected = $('.tab-unselected'), sectionTableResults = $('.section-table-results'), sectionTest = $('.section-test'),
            tabVerification = $('#tab-verification'), tabResults = $('#tab-results');

            tabResults.on('click', function () {
                if (sectionTableResults.hasClass("hidden")) {
                    sectionTableResults.removeClass("hidden");
                    sectionTest.addClass("hidden");
                    $(this).removeClass("tab-unselected");
                    tabVerification.addClass("tab-unselected");
                }
            });

            tabVerification.on('click', function () {
                if (sectionTest.hasClass("hidden")) {
                    sectionTableResults.addClass("hidden");
                    sectionTest.removeClass("hidden");
                    $(this).removeClass("tab-unselected");
                    tabResults.addClass("tab-unselected");
                }
            });
        });
    </script>
}